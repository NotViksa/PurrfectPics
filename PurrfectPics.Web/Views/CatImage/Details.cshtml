@using System.Security.Claims
@model PurrfectPics.Data.Models.CatImage

@{
    ViewData["Title"] = Model.Title;
}

<div class="cat-image-container">
    <div class="image-column">
        <div class="image-wrapper">
            <img src="@Model.ImageUrl" class="cat-image" alt="@Model.Title">
        </div>
    </div>

    <div class="content-column">
        <h1 class="image-title">@Model.Title</h1>
        <p class="image-description">@Model.Description</p>

        <div class="image-details">
            <h3>Details</h3>
            <p><strong>Uploaded by:</strong> @(Model.UploadedBy?.DisplayName ?? "Unknown")</p>
            <p><strong>Date:</strong> @Model.UploadDate.ToString("MMMM dd, yyyy")</p>
            <p>
                <strong>Tags:</strong>
                @foreach (var tag in Model.Tags)
                {
                    <a asp-controller="CatImage" asp-action="Search" asp-route-query="@tag.Name" class="tag">@tag.Name</a>
                }
            </p>
        </div>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="action-buttons">
                <!-- Favorite Button -->
                <form asp-action="ToggleFavorite" asp-route-imageId="@Model.Id" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn-favorite @(ViewBag.IsFavorited ? "favorited" : "")">
                        @(ViewBag.IsFavorited ? "❤️ Favorited" : "♡ Favorite")
                    </button>
                </form>

                <!-- Voting -->
                <div class="voting">
                    <form asp-action="SubmitVote" asp-route-imageId="@Model.Id" asp-route-isUpvote="true" method="post">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn-vote @(ViewBag.UserVote == true ? "upvoted" : "")">↑</button>
                    </form>
                    <span class="vote-count">@ViewBag.Score</span>
                    <form asp-action="SubmitVote" asp-route-imageId="@Model.Id" asp-route-isUpvote="false" method="post">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn-vote @(ViewBag.UserVote == false ? "downvoted" : "")">↓</button>
                    </form>
                </div>
            </div>

            <!-- Delete Button (for owners/admins) -->
            @if (Model.UploadedById == User.FindFirstValue(ClaimTypes.NameIdentifier) || User.IsInRole("Administrator"))
            {
                <form asp-action="Delete" method="post" class="delete-form">
                    <input type="hidden" name="id" value="@Model.Id" />
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn-delete"
                            onclick="return confirm('Are you sure you want to delete this image?')">
                        Delete Image
                    </button>
                </form>
            }
        }

        <!-- Comments Section -->
        <div class="comments-section">
            <h3>Comments</h3>

            @if (User.Identity.IsAuthenticated)
            {
                <form asp-controller="Comment" asp-action="AddComment" method="post" class="comment-form">
                    <input type="hidden" name="catImageId" value="@Model.Id" />
                    <textarea name="content" placeholder="Add a comment..." required></textarea>
                    <button type="submit" class="btn-post">Post Comment</button>
                </form>
            }

            <div class="comments-list">
                @foreach (var comment in Model.Comments)
                {
                    <div class="comment" data-comment-id="@comment.Id">
                        <img src="@comment.PostedBy?.ProfileImageUrl" class="comment-avatar" alt="@comment.PostedBy?.DisplayName">
                        <div class="comment-body">
                            <div class="comment-header">
                                <div class="comment-author">
                                    <strong>@comment.PostedBy?.DisplayName</strong>
                                    <span class="comment-date">@comment.PostedDate.ToString("MMMM dd, yyyy")</span>
                                </div>

                                @if (User.Identity.IsAuthenticated &&
                                                            (comment.PostedById == User.FindFirstValue(ClaimTypes.NameIdentifier) || User.IsInRole("Administrator")))
                                {
                                    <div class="comment-actions">
                                        @if (comment.PostedById == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                        {
                                            <button class="btn-edit" data-comment-id="@comment.Id">Edit</button>
                                        }
                                        <form asp-controller="Comment" asp-action="DeleteComment" method="post">
                                            <input type="hidden" name="commentId" value="@comment.Id" />
                                            <input type="hidden" name="catImageId" value="@Model.Id" />
                                            <button type="submit" class="btn-delete"
                                                    onclick="return confirm('Delete this comment?')">
                                                Delete
                                            </button>
                                        </form>
                                    </div>
                                }
                            </div>
                            <p class="comment-text">@comment.Content</p>

                            <!-- Edit Form (hidden by default) -->
                            <form class="comment-edit-form" style="display: none;">
                                <textarea class="edit-textarea">@comment.Content</textarea>
                                <div class="edit-actions">
                                    <button type="button" class="btn-save">Save</button>
                                    <button type="button" class="btn-cancel">Cancel</button>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle favorite and vote forms with AJAX
            $('form:not(.delete-form):not(.comment-form):not(.comment-edit-form)').submit(function(e) {
                e.preventDefault();
                var form = $(this);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(data) {
                        if (form.attr('action').includes('ToggleFavorite')) {
                            // Update favorite button
                            var btn = form.find('.btn-favorite');
                            btn.toggleClass('favorited');
                            btn.html(btn.hasClass('favorited') ? '❤️ Favorited' : '♡ Favorite');
                        } else if (form.attr('action').includes('SubmitVote')) {
                            // Update vote count
                            location.reload();
                        }
                    }
                });
            });

            // Comment edit functionality
            $('.btn-edit').click(function() {
                const commentId = $(this).data('comment-id');
                const comment = $(`.comment[data-comment-id="${commentId}"]`);
                comment.find('.comment-text').hide();
                comment.find('.comment-edit-form').show();
            });

            $('.btn-cancel').click(function() {
                const comment = $(this).closest('.comment');
                comment.find('.comment-edit-form').hide();
                comment.find('.comment-text').show();
            });

            $('.btn-save').click(function() {
                const comment = $(this).closest('.comment');
                const commentId = comment.data('comment-id');
                const newContent = comment.find('.edit-textarea').val();

                $.post('/Comment/EditComment', {
                    commentId: commentId,
                    content: newContent,
                    catImageId: '@Model.Id',
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                }, function() {
                    location.reload();
                });
            });

            // Handle comment submission with AJAX
            $('.comment-form').submit(function(e) {
                e.preventDefault();
                var form = $(this);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function() {
                        location.reload();
                    }
                });
            });
        });
    </script>
}